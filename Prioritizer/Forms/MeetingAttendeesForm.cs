using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using PrioritizerService.Model;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraEditors.Controls;
using Prioritizer.Utils;
using Prioritizer.Shared.Model;
using Prioritizer.Proxy;

namespace Prioritizer.Forms
{
    public partial class MeetingAttendeesForm : DevExpress.XtraEditors.XtraForm
    {
        private static List<MeetingAttendies> usersList;
        private frmMain _parentForm;
        List<MeetingAttendies> deletedRowsList = new List<MeetingAttendies>();
        private Guid _meetingID;
        public MeetingAttendeesForm(Guid MeetingID, frmMain parentForm)
        {
            _parentForm = parentForm;
            _meetingID = MeetingID;
            InitializeComponent();

        }



        private void SetGridProperties()
        {
            //usersGrid.
            gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Top;
            //usersGrid.MasterTemplate.AllowAddNewRow = true;
            //usersGrid.MasterTemplate.AutoGenerateColumns = true;
            //usersGrid.MasterTemplate.EnableGrouping = true;
            //usersGrid.MasterTemplate.EnableFiltering = true;
            //usersGrid.MasterTemplate.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.None;
            //usersGrid.MasterTemplate.AllowRowResize = true;
            //usersGrid.MasterTemplate.AllowColumnResize = true;
            //usersGrid.GridElement.TableHeaderHeight = 50;
        }

        private void SetColumnsProperties()
        {

            //foreach (GridViewColumn col in usersGrid.MasterTemplate.Columns)
            //{
            //    col.WrapText = true;
            //    col.AllowResize = true;
            //    col.AllowResize = true;
            //}

            //usersGrid.EnableHotTracking = true;

            hideUnnecessaryColumns();

            removeAutoGeneratedColumns();

            bindComboToGrid();

            //usersGrid.MasterGridViewTemplate.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;

        }

        private void bindComboToGrid()
        {
            RepositoryItemLookUpEdit cboGridUsers = new RepositoryItemLookUpEdit();
            gridView1.Columns["AttendeeID"].ColumnEdit = cboGridUsers;
            cboGridUsers.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor;
            cboGridUsers.Name = "attendeeID";
            cboGridUsers.ValueMember = "ID";
            cboGridUsers.DisplayMember = "userName";
            cboGridUsers.Columns.Add(new LookUpColumnInfo("userName", 80));
            usersGrid.RepositoryItems.Add(cboGridUsers);
            cboGridUsers.DataSource = frmMain.usersList;
            cboGridUsers.ForceInitialize();
            gridView1.Columns["AttendeeID"].Caption = "Attendee";
        }

        private void removeAutoGeneratedColumns()
        {
            gridView1.Columns.Remove(gridView1.Columns["meetings"]);
            gridView1.Columns.Remove(gridView1.Columns["users"]);
            gridView1.Columns.Remove(gridView1.Columns["changetracker"]);
            gridView1.Columns.Remove(gridView1.Columns["meetingID"]);
            
        }

        private void hideUnnecessaryColumns()
        {
            for (int x = 0; x < gridView1.Columns.Count; x++)
                gridView1.Columns[x].Visible = false;

            gridView1.Columns["AttendeeID"].Visible = true;
        }



        //private void authorizationGrid_UserDeletingRow(object sender, GridViewRowCancelEventArgs e)
        //{
        //    deletedRowsList.Add((MeetingAttendies)(((Telerik.WinControls.UI.BaseGridNavigator)(sender)).MasterTemplate.CurrentRow).DataBoundItem);
        //}



        void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape) this.Close();
            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void usersGrid_Load(object sender, EventArgs e)
        {

        }

        private void MeetingAttendeesForm_Load(object sender, EventArgs e)
        {
            usersList = new List<MeetingAttendies>(ConnectionManager.Proxy.getMeetingAttendees(_meetingID));
            usersList.ForEach(i => i.StartTracking()); //start the self tracking for each element
            BindingList<MeetingAttendies> boundAttendeesList = new BindingList<MeetingAttendies>(usersList);
            
            usersGrid.DataSource = boundAttendeesList;

            SetGridProperties();
            SetColumnsProperties();
        }

        private void btnSave_Click_1(object sender, EventArgs e)
        {
            
            //deleted rows
            if (deletedRowsList.Count > 0)
            {
                foreach (var x in deletedRowsList)
                {
                    if (x != null)
                        ConnectionManager.Proxy.deleteMeetingAttendies(x);
                }
                deletedRowsList.Clear();
            }

            //modified or added rows
            foreach (MeetingAttendies user in usersList)
            {
                if (user.ChangeTracker.State != ObjectState.Unchanged)
                {
                    user.MeetingID = _meetingID;
                    user.TenantID = frmMain._tenantID;
                    ConnectionManager.Proxy.applyChangesMeetingAttendies(user);
                }
            }
            this.Close();
           
        }

        private void usersGrid_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Delete)
            {
                var selectedRowHandle = gridView1.GetSelectedRows()[0];
                deletedRowsList.Add(gridView1.GetRow(selectedRowHandle) as MeetingAttendies);
                gridView1.DeleteRow(selectedRowHandle);
            }
        }   
    }
}