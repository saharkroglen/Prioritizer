using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using PrioritizerService.Model;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraEditors.Controls;
using Prioritizer.Utils;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Columns;
using Prioritizer.Shared.Model;
using Prioritizer.Proxy;

namespace Prioritizer.Forms
{
    public partial class UsersForm : DevExpress.XtraEditors.XtraForm
    {
        private static List<Users> usersList;
        private frmMain _parentForm;
        List<Users> deletedRowsList = new List<Users>();
        private Guid _tenantID;
        private Users _specificUser ;
        public UsersForm(Guid tenantID, frmMain parentForm, Users specificUser)
        {
            _parentForm = parentForm;
            _tenantID = tenantID;
            _specificUser = specificUser;
            InitializeComponent();

        }

        private void SetGridProperties()
        {
            gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Top;
            gridView1.ValidateRow += new DevExpress.XtraGrid.Views.Base.ValidateRowEventHandler(gridView1_ValidateRow);
            gridView1.ValidatingEditor += new BaseContainerValidateEditorEventHandler(gridView1_ValidatingEditor);
            gridView1.InvalidRowException += new DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventHandler(gridView1_InvalidRowException);
        }

        void gridView1_ValidatingEditor(object sender, BaseContainerValidateEditorEventArgs e)
        {
            GridView view = sender as GridView;


            if (view.FocusedColumn.FieldName == "email")
            {
                GridColumn emailCol = view.Columns["email"];

                var emailStr = e.Value;


                //Validity criterion
                if (emailStr == null || emailStr.ToString().Trim().Length == 0)
                {
                    e.Valid = false;
                    e.ErrorText = "Must enter value";
                    //Set errors with specific descriptions for the columns
                    //view.SetColumnError(emailCol, "Must enter valid email");
                    return;
                }
                if (!Shared.Utils.IsValidEmailFormat(emailStr.ToString()))
                {
                    e.Valid = false;
                    e.ErrorText = "Email is not valid";
                }
            }
        }

        void gridView1_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.NoAction;
            (sender as GridView).ShowEditor();
        }

        void gridView1_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
           
        }

        private void SetColumnsProperties()
        {
            hideUnnecessaryColumns();
            removeAutoGeneratedColumns();
            bindAdditionalButtonsToGrid();
        }

        private void bindAdditionalButtonsToGrid()
        {
            //add "open attachment" button
            RepositoryItemButtonEdit repositoryItemButtons = new RepositoryItemButtonEdit();
            repositoryItemButtons.Buttons[0].Kind = ButtonPredefines.Right;
            repositoryItemButtons.Buttons[0].Caption = "Re-Invite";
            repositoryItemButtons.TextEditStyle = TextEditStyles.HideTextEditor;
            
            if (_specificUser == null)
            {
                GridColumn unbColumn = gridView1.Columns.AddField("Invite");
                //unbColumn.Caption = "Re-Invite";
                unbColumn.Width = 40;
                unbColumn.UnboundType = DevExpress.Data.UnboundColumnType.String;
                unbColumn.VisibleIndex = gridView1.Columns.Count;
                unbColumn.ColumnEdit = repositoryItemButtons;
                repositoryItemButtons.Name = "Re-Invite";
                gridView1.ShowButtonMode = DevExpress.XtraGrid.Views.Base.ShowButtonModeEnum.ShowAlways;
                repositoryItemButtons.Click += new EventHandler(btnInvite_Click);
            }
        }

        void btnInvite_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(string.Format("Re-Inviting a user will reset his password and send a newly generated temporary password{0}Continue?", Environment.NewLine), "Invite User", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)
            {
                Users user = gridView1.GetRow(gridView1.GetSelectedRows()[0]) as Users;
                ConnectionManager.Proxy.sendInvitationMail(user, frmMain.loggedInUserID);

                MessageBox.Show(string.Format("Invitation was successfully sent to {0}", user.userName), "Invitation", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void removeAutoGeneratedColumns()
        {
            gridView1.Columns.Remove(gridView1.Columns["Tenant"]);            
            gridView1.Columns.Remove(gridView1.Columns["changetracker"]);
            gridView1.Columns.Remove(gridView1.Columns["Meetings"]);
            gridView1.Columns.Remove(gridView1.Columns["MeetingAttendies"]);
            gridView1.Columns.Remove(gridView1.Columns["MeetingCategory"]);
            gridView1.Columns.Remove(gridView1.Columns["UserID_ManagerID"]);
            gridView1.Columns.Remove(gridView1.Columns["UserID_TeamMemberID"]);
            
        }

        private void hideUnnecessaryColumns()
        {
            for (int x = 0; x < gridView1.Columns.Count; x++)
                gridView1.Columns[x].Visible = false;

            if (_specificUser == null)
            {
                gridView1.Columns["IsAdmin"].Visible = true;
                gridView1.Columns["domainUserName"].Visible = true;
            }
            gridView1.Columns["email"].Visible = true;
            gridView1.Columns["userName"].Visible = true;
        }
        
        void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape) this.Close();
            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void usersGrid_Load(object sender, EventArgs e)
        {

        }

        private void UsersForm_Load(object sender, EventArgs e)
        {
            if (_specificUser != null)
            {
                usersList = new List<Users>();
                usersList.Add(ConnectionManager.Proxy.getUserByID(_specificUser.ID));
            }
            else
                usersList = new List<Users>(ConnectionManager.Proxy.getUsersList(_tenantID));


            usersList.ForEach(i => i.StartTracking()); //start the self tracking for each element
            BindingList<Users> userList = new BindingList<Users>(usersList);
            userList.AllowRemove = false;

            usersGrid.DataSource = userList;

            SetGridProperties();
            SetColumnsProperties();
        }

        private void btnSave_Click_1(object sender, EventArgs e)
        {            
            //deleted rows
            if (deletedRowsList.Count > 0)
            {
                foreach (var x in deletedRowsList)
                {
                    if (x != null)
                        ConnectionManager.Proxy.deleteUsers(x);
                }
                deletedRowsList.Clear();
            }

            //modified or added rows
            foreach (Users user in usersList)
            {
                if (user.ChangeTracker.State != ObjectState.Unchanged)
                {
                    user.TenantID = frmMain._tenantID;
                    ConnectionManager.Proxy.applyChangesUsers(user, frmMain.loggedInUserID);
                }
            }
            this.Close();
            
        }

        private void usersGrid_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyData == Keys.Delete)
            //{
            //    var selectedRowHandle = gridView1.GetSelectedRows()[0];
                
            //    deletedRowsList.Add(gridView1.GetRow(selectedRowHandle) as Users);
            //    gridView1.DeleteRow(selectedRowHandle);
            //}
        }

       
    }
}