using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using PrioritizerService.Model;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraEditors.Controls;
using System.Linq;
using DevExpress.XtraGrid.Columns;
using Prioritizer.Shared.Model;
using Prioritizer.Proxy;
namespace Prioritizer.Forms
{
    public partial class ProjectsForm : DevExpress.XtraEditors.XtraForm
    {
        private frmMain _parentForm;
        List<projects> deletedRowsList = new List<projects>();
        List<projects> _projectsCollection;
        public ProjectsForm(List<projects> projectsCollection, frmMain parentForm)
        {
            _parentForm = parentForm;
            _projectsCollection = projectsCollection;
            InitializeComponent();

        }



        private void SetGridProperties()
        {
            //gridView1.OptionsBehavior.Editable= false;
        }

        private void SetColumnsProperties()
        {

            hideUnnecessaryColumns();
            removeAutoGeneratedColumns();
            bindComboToGrid();
        }

        private void bindComboToGrid()
        {
            
        }

     

        private void removeAutoGeneratedColumns()
        {
            gridView1.Columns.Remove(gridView1.Columns["changetracker"]);
        }

        private void hideUnnecessaryColumns()
        {
            for (int x = 0; x < gridView1.Columns.Count; x++)
                gridView1.Columns[x].Visible = false;

            gridView1.Columns["projectName"].Visible = true;
        }




        void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape) this.Close();
            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void usersGrid_Load(object sender, EventArgs e)
        {

        }

        private void MeetingAttendeesForm_Load(object sender, EventArgs e)
        {
            projectsGrid.DataSource = _projectsCollection;
            

            SetGridProperties();
            SetColumnsProperties();
        }

        private void usersGrid_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Delete)
            {
                var selectedRowHandle = gridView1.GetSelectedRows()[0];
                deletedRowsList.Add(gridView1.GetRow(selectedRowHandle) as projects);
                gridView1.DeleteRow(selectedRowHandle);
            }
        }

        private void projectsGrid_Click(object sender, EventArgs e)
        {
            
        }


        private void btnSave_Click(object sender, EventArgs e)
        {
            //deleted rows
            if (deletedRowsList.Count > 0)
            {
                foreach (var x in deletedRowsList)
                {
                    if (x != null)
                        ConnectionManager.Proxy.deleteProjects(x);
                }
                deletedRowsList.Clear();
            }

            //modified or added rows
            foreach (projects proj in _projectsCollection)
            {
                if (proj.ChangeTracker.State != ObjectState.Unchanged)
                {
                    proj.TenantID = frmMain._tenantID;
                    ConnectionManager.Proxy.applyChangesProjects(proj, frmMain._tenantID);
                }
            }
            this.Close();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }   
    }
}