using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using PrioritizerService.Model;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraEditors.Controls;
using Prioritizer.Utils;
using Prioritizer.Shared.Model;
using Prioritizer.Proxy;

namespace Prioritizer.Forms
{
    public partial class AurhorizationForm : DevExpress.XtraEditors.XtraForm
    {
        private static List<ManagerTeamMemberRelations> ManagerTeamMemberList;
        private frmMain _parentForm;
        List<ManagerTeamMemberRelations> deletedRowsList = new List<ManagerTeamMemberRelations>();
        private Guid _tenantID;
        public AurhorizationForm(Guid tenantID, frmMain parentForm)
        {
            _parentForm = parentForm;
            _tenantID = tenantID;
            InitializeComponent();

        }

        private void SetGridProperties()
        {
            gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Top;
        }

        private void SetColumnsProperties()
        {
            hideUnnecessaryColumns();
            removeAutoGeneratedColumns();
            bindComboToGrid();
        }

        private void bindComboToGrid()
        {
            RepositoryItemLookUpEdit cboTeamMember = new RepositoryItemLookUpEdit();
            gridView1.Columns["TeamMemberID"].ColumnEdit = cboTeamMember;
            cboTeamMember.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor;
            cboTeamMember.Name = "TeamMemberID";
            cboTeamMember.ValueMember = "ID";
            cboTeamMember.DisplayMember = "userName";
            cboTeamMember.Columns.Add(new LookUpColumnInfo("userName", 80));
            usersGrid.RepositoryItems.Add(cboTeamMember);
            cboTeamMember.DataSource = frmMain.usersList;
            cboTeamMember.ForceInitialize();
            gridView1.Columns["TeamMemberID"].Caption = "Team Member";

            RepositoryItemLookUpEdit cboManager = new RepositoryItemLookUpEdit();
            gridView1.Columns["ManagerID"].ColumnEdit = cboManager;
            cboManager.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor;
            cboManager.Name = "ManagerID";
            cboManager.ValueMember = "ID";
            cboManager.DisplayMember = "userName";
            cboManager.Columns.Add(new LookUpColumnInfo("userName", 80));
            usersGrid.RepositoryItems.Add(cboManager);
            cboManager.DataSource = frmMain.usersList;
            cboManager.ForceInitialize();
            gridView1.Columns["ManagerID"].Caption = "Manager";
        }

        private void removeAutoGeneratedColumns()
        {
            gridView1.Columns.Remove(gridView1.Columns["Tenant"]);            
            gridView1.Columns.Remove(gridView1.Columns["changetracker"]);
            gridView1.Columns.Remove(gridView1.Columns["ManagerID_UserID"]);
            gridView1.Columns.Remove(gridView1.Columns["TeamMemberID_UserID"]);
            
        }

        private void hideUnnecessaryColumns()
        {
            for (int x = 0; x < gridView1.Columns.Count; x++)
                gridView1.Columns[x].Visible = false;

            gridView1.Columns["TeamMemberID"].Visible = true;
            gridView1.Columns["ManagerID"].Visible = true;

        }
        
        void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape) this.Close();
            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void usersGrid_Load(object sender, EventArgs e)
        {

        }

        private void AurhorizationForm_Load(object sender, EventArgs e)
        {
            ManagerTeamMemberList = new List<ManagerTeamMemberRelations>(ConnectionManager.Proxy.getManagerTeamMemberRelationsList(_tenantID));
            ManagerTeamMemberList.ForEach(i => i.StartTracking()); //start the self tracking for each element
            BindingList<ManagerTeamMemberRelations> boundAttendeesList = new BindingList<ManagerTeamMemberRelations>(ManagerTeamMemberList);
            
            usersGrid.DataSource = boundAttendeesList;

            SetGridProperties();
            SetColumnsProperties();
        }

        private void btnSave_Click_1(object sender, EventArgs e)
        {
            
            //deleted rows
            if (deletedRowsList.Count > 0)
            {
                foreach (var x in deletedRowsList)
                {
                    if (x != null)
                        ConnectionManager.Proxy.deleteManagerTeamMemberRelations(x);
                }
                deletedRowsList.Clear();
            }

            //modified or added rows
            foreach (ManagerTeamMemberRelations pair in ManagerTeamMemberList)
            {
                if (pair.ChangeTracker.State != ObjectState.Unchanged)
                {
                    pair.TenantID = frmMain._tenantID;
                    ConnectionManager.Proxy.applyChangesManagerTeamMemberRelations(pair);
                }
            }
            this.Close();
            
        }

        private void usersGrid_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Delete)
            {
                var selectedRowHandle = gridView1.GetSelectedRows()[0];
                deletedRowsList.Add(gridView1.GetRow(selectedRowHandle) as ManagerTeamMemberRelations);
                gridView1.DeleteRow(selectedRowHandle);
            }
        }   
    }
}