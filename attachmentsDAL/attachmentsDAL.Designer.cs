////------------------------------------------------------------------------------
//// <auto-generated>
////    This code was generated from a template.
////
////    Manual changes to this file may cause unexpected behavior in your application.
////    Manual changes to this file will be overwritten if the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------

//using System;
//using System.Data.Objects;
//using System.Data.Objects.DataClasses;
//using System.Data.EntityClient;
//using System.ComponentModel;
//using System.Xml.Serialization;
//using System.Runtime.Serialization;

//[assembly: EdmSchemaAttribute()]

//namespace attachmentsDAL
//{
//    #region Contexts
    
//    /// <summary>
//    /// No Metadata Documentation available.
//    /// </summary>
//    public partial class attachDBEntities : ObjectContext
//    {
//        #region Constructors
    
//        /// <summary>
//        /// Initializes a new attachDBEntities object using the connection string found in the 'attachDBEntities' section of the application configuration file.
//        /// </summary>
//        public attachDBEntities() : base("name=attachDBEntities", "attachDBEntities")
//        {
//            this.ContextOptions.LazyLoadingEnabled = true;
//            OnContextCreated();
//        }
    
//        /// <summary>
//        /// Initialize a new attachDBEntities object.
//        /// </summary>
//        public attachDBEntities(string connectionString) : base(connectionString, "attachDBEntities")
//        {
//            this.ContextOptions.LazyLoadingEnabled = true;
//            OnContextCreated();
//        }
    
//        /// <summary>
//        /// Initialize a new attachDBEntities object.
//        /// </summary>
//        public attachDBEntities(EntityConnection connection) : base(connection, "attachDBEntities")
//        {
//            this.ContextOptions.LazyLoadingEnabled = true;
//            OnContextCreated();
//        }
    
//        #endregion
    
//        #region Partial Methods
    
//        partial void OnContextCreated();
    
//        #endregion
    
//        #region ObjectSet Properties
    
//        /// <summary>
//        /// No Metadata Documentation available.
//        /// </summary>
//        public ObjectSet<attachments> attachments
//        {
//            get
//            {
//                if ((_attachments == null))
//                {
//                    _attachments = base.CreateObjectSet<attachments>("attachments");
//                }
//                return _attachments;
//            }
//        }
//        private ObjectSet<attachments> _attachments;

//        #endregion
//        #region AddTo Methods
    
//        /// <summary>
//        /// Deprecated Method for adding a new object to the attachments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
//        /// </summary>
//        public void AddToattachments(attachments attachments)
//        {
//            base.AddObject("attachments", attachments);
//        }

//        #endregion
//    }
    

//    #endregion
    
//    #region Entities
    
//    /// <summary>
//    /// No Metadata Documentation available.
//    /// </summary>
//    [EdmEntityTypeAttribute(NamespaceName="attachDBModel", Name="attachments")]
//    [Serializable()]
//    [DataContractAttribute(IsReference=true)]
//    public partial class attachments : EntityObject
//    {
//        #region Factory Method
    
//        /// <summary>
//        /// Create a new attachments object.
//        /// </summary>
//        /// <param name="id">Initial value of the ID property.</param>
//        public static attachments Createattachments(global::System.Int32 id)
//        {
//            attachments attachments = new attachments();
//            attachments.ID = id;
//            return attachments;
//        }

//        #endregion
//        #region Primitive Properties
    
//        /// <summary>
//        /// No Metadata Documentation available.
//        /// </summary>
//        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
//        [DataMemberAttribute()]
//        public global::System.Int32 ID
//        {
//            get
//            {
//                return _ID;
//            }
//            set
//            {
//                if (_ID != value)
//                {
//                    OnIDChanging(value);
//                    ReportPropertyChanging("ID");
//                    _ID = StructuralObject.SetValidValue(value);
//                    ReportPropertyChanged("ID");
//                    OnIDChanged();
//                }
//            }
//        }
//        private global::System.Int32 _ID;
//        partial void OnIDChanging(global::System.Int32 value);
//        partial void OnIDChanged();
    
//        /// <summary>
//        /// No Metadata Documentation available.
//        /// </summary>
//        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
//        [DataMemberAttribute()]
//        public global::System.Byte[] bin
//        {
//            get
//            {
//                return StructuralObject.GetValidValue(_bin);
//            }
//            set
//            {
//                OnbinChanging(value);
//                ReportPropertyChanging("bin");
//                _bin = StructuralObject.SetValidValue(value, true);
//                ReportPropertyChanged("bin");
//                OnbinChanged();
//            }
//        }
//        private global::System.Byte[] _bin;
//        partial void OnbinChanging(global::System.Byte[] value);
//        partial void OnbinChanged();
    
//        /// <summary>
//        /// No Metadata Documentation available.
//        /// </summary>
//        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
//        [DataMemberAttribute()]
//        public Nullable<global::System.Int32> taskID
//        {
//            get
//            {
//                return _taskID;
//            }
//            set
//            {
//                OntaskIDChanging(value);
//                ReportPropertyChanging("taskID");
//                _taskID = StructuralObject.SetValidValue(value);
//                ReportPropertyChanged("taskID");
//                OntaskIDChanged();
//            }
//        }
//        private Nullable<global::System.Int32> _taskID;
//        partial void OntaskIDChanging(Nullable<global::System.Int32> value);
//        partial void OntaskIDChanged();
    
//        /// <summary>
//        /// No Metadata Documentation available.
//        /// </summary>
//        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
//        [DataMemberAttribute()]
//        public global::System.String fileName
//        {
//            get
//            {
//                return _fileName;
//            }
//            set
//            {
//                OnfileNameChanging(value);
//                ReportPropertyChanging("fileName");
//                _fileName = StructuralObject.SetValidValue(value, true);
//                ReportPropertyChanged("fileName");
//                OnfileNameChanged();
//            }
//        }
//        private global::System.String _fileName;
//        partial void OnfileNameChanging(global::System.String value);
//        partial void OnfileNameChanged();

//        #endregion
    
//    }

//    #endregion
    
//}
