//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Prioritizer.Shared.Model
{
    [DataContract(IsReference = true)]
    [Serializable]
    [KnownType(typeof(Meetings))]
    [KnownType(typeof(MeetingAttendies))]
    [KnownType(typeof(MeetingCategory))]
    [KnownType(typeof(ManagerTeamMemberRelations))]
    [KnownType(typeof(Tenant))]
    [KnownType(typeof(Tasks))]
    public partial class Users: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private System.Guid _iD;
    
        [DataMember]
        public string userName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordPropertyChange("userName");
                    _userName = value;
                    OnPropertyChanged("userName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string domainUserName
        {
            get { return _domainUserName; }
            set
            {
                if (_domainUserName != value)
                {
                    ChangeTracker.RecordPropertyChange("domainUserName");
                    _domainUserName = value;
                    OnPropertyChanged("domainUserName");
                }
            }
        }
        private string _domainUserName;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    ChangeTracker.RecordPropertyChange("email");
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public System.Guid TenantID
        {
            get { return _tenantID; }
            set
            {
                if (_tenantID != value)
                {
                    ChangeTracker.RecordOriginalValue("TenantID", _tenantID);
      if (!IsDeserializing)
      {
                          if (Tenant != null && Tenant.ID != value)
                        {
                            Tenant = null;
                        }
                    }
                    _tenantID = value;
                    OnPropertyChanged("TenantID");
                }
            }
        }
        private System.Guid _tenantID;
    
        [DataMember]
        public bool IsAdmin
        {
            get { return _isAdmin; }
            set
            {
                if (_isAdmin != value)
                {
                    ChangeTracker.RecordPropertyChange("IsAdmin");
                    _isAdmin = value;
                    OnPropertyChanged("IsAdmin");
                }
            }
        }
        private bool _isAdmin;
    
        [DataMember]
        public string password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    ChangeTracker.RecordPropertyChange("password");
                    _password = value;
                    OnPropertyChanged("password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public bool Activated
        {
            get { return _activated; }
            set
            {
                if (_activated != value)
                {
                    ChangeTracker.RecordPropertyChange("Activated");
                    _activated = value;
                    OnPropertyChanged("Activated");
                }
            }
        }
        private bool _activated;
    
        [DataMember]
        public bool TemporaryPassword
        {
            get { return _temporaryPassword; }
            set
            {
                if (_temporaryPassword != value)
                {
                    ChangeTracker.RecordPropertyChange("TemporaryPassword");
                    _temporaryPassword = value;
                    OnPropertyChanged("TemporaryPassword");
                }
            }
        }
        private bool _temporaryPassword;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Meetings> Meetings
        {
            get
            {
                if (_meetings == null)
                {
                    _meetings = new TrackableCollection<Meetings>();
                    _meetings.CollectionChanged += FixupMeetings;
                }
                return _meetings;
            }
            set
            {
                if (!ReferenceEquals(_meetings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetings != null)
                    {
                        _meetings.CollectionChanged -= FixupMeetings;
                    }
                    _meetings = value;
                    if (_meetings != null)
                    {
                        _meetings.CollectionChanged += FixupMeetings;
                    }
                    OnNavigationPropertyChanged("Meetings");
                }
            }
        }
        private TrackableCollection<Meetings> _meetings;
    
        [DataMember]
        public TrackableCollection<MeetingAttendies> MeetingAttendies
        {
            get
            {
                if (_meetingAttendies == null)
                {
                    _meetingAttendies = new TrackableCollection<MeetingAttendies>();
                    _meetingAttendies.CollectionChanged += FixupMeetingAttendies;
                }
                return _meetingAttendies;
            }
            set
            {
                if (!ReferenceEquals(_meetingAttendies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetingAttendies != null)
                    {
                        _meetingAttendies.CollectionChanged -= FixupMeetingAttendies;
                    }
                    _meetingAttendies = value;
                    if (_meetingAttendies != null)
                    {
                        _meetingAttendies.CollectionChanged += FixupMeetingAttendies;
                    }
                    OnNavigationPropertyChanged("MeetingAttendies");
                }
            }
        }
        private TrackableCollection<MeetingAttendies> _meetingAttendies;
    
        [DataMember]
        public TrackableCollection<MeetingCategory> MeetingCategory
        {
            get
            {
                if (_meetingCategory == null)
                {
                    _meetingCategory = new TrackableCollection<MeetingCategory>();
                    _meetingCategory.CollectionChanged += FixupMeetingCategory;
                }
                return _meetingCategory;
            }
            set
            {
                if (!ReferenceEquals(_meetingCategory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetingCategory != null)
                    {
                        _meetingCategory.CollectionChanged -= FixupMeetingCategory;
                    }
                    _meetingCategory = value;
                    if (_meetingCategory != null)
                    {
                        _meetingCategory.CollectionChanged += FixupMeetingCategory;
                    }
                    OnNavigationPropertyChanged("MeetingCategory");
                }
            }
        }
        private TrackableCollection<MeetingCategory> _meetingCategory;
    
        [DataMember]
        public TrackableCollection<ManagerTeamMemberRelations> UserID_ManagerID
        {
            get
            {
                if (_userID_ManagerID == null)
                {
                    _userID_ManagerID = new TrackableCollection<ManagerTeamMemberRelations>();
                    _userID_ManagerID.CollectionChanged += FixupUserID_ManagerID;
                }
                return _userID_ManagerID;
            }
            set
            {
                if (!ReferenceEquals(_userID_ManagerID, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userID_ManagerID != null)
                    {
                        _userID_ManagerID.CollectionChanged -= FixupUserID_ManagerID;
                    }
                    _userID_ManagerID = value;
                    if (_userID_ManagerID != null)
                    {
                        _userID_ManagerID.CollectionChanged += FixupUserID_ManagerID;
                    }
                    OnNavigationPropertyChanged("UserID_ManagerID");
                }
            }
        }
        private TrackableCollection<ManagerTeamMemberRelations> _userID_ManagerID;
    
        [DataMember]
        public TrackableCollection<ManagerTeamMemberRelations> UserID_TeamMemberID
        {
            get
            {
                if (_userID_TeamMemberID == null)
                {
                    _userID_TeamMemberID = new TrackableCollection<ManagerTeamMemberRelations>();
                    _userID_TeamMemberID.CollectionChanged += FixupUserID_TeamMemberID;
                }
                return _userID_TeamMemberID;
            }
            set
            {
                if (!ReferenceEquals(_userID_TeamMemberID, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userID_TeamMemberID != null)
                    {
                        _userID_TeamMemberID.CollectionChanged -= FixupUserID_TeamMemberID;
                    }
                    _userID_TeamMemberID = value;
                    if (_userID_TeamMemberID != null)
                    {
                        _userID_TeamMemberID.CollectionChanged += FixupUserID_TeamMemberID;
                    }
                    OnNavigationPropertyChanged("UserID_TeamMemberID");
                }
            }
        }
        private TrackableCollection<ManagerTeamMemberRelations> _userID_TeamMemberID;
    
        [DataMember]
        public Tenant Tenant
        {
            get { return _tenant; }
            set
            {
                if (!ReferenceEquals(_tenant, value))
                {
                    var previousValue = _tenant;
                    _tenant = value;
                    FixupTenant(previousValue);
                    OnNavigationPropertyChanged("Tenant");
                }
            }
        }
        private Tenant _tenant;
    
        [DataMember]
        public TrackableCollection<Tasks> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Tasks>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Tasks> _tasks;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Meetings.Clear();
            MeetingAttendies.Clear();
            MeetingCategory.Clear();
            UserID_ManagerID.Clear();
            UserID_TeamMemberID.Clear();
            Tenant = null;
            Tasks.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTenant(Tenant previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Tenant != null)
            {
                if (!Tenant.Users.Contains(this))
                {
                    Tenant.Users.Add(this);
                }
    
                TenantID = Tenant.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tenant")
                    && (ChangeTracker.OriginalValues["Tenant"] == Tenant))
                {
                    ChangeTracker.OriginalValues.Remove("Tenant");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tenant", previousValue);
                }
                if (Tenant != null && !Tenant.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tenant.StartTracking();
                }
            }
        }
    
        private void FixupMeetings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Meetings item in e.NewItems)
                {
                    item.Users = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Meetings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Meetings item in e.OldItems)
                {
                    if (ReferenceEquals(item.Users, this))
                    {
                        item.Users = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Meetings", item);
                    }
                }
            }
        }
    
        private void FixupMeetingAttendies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MeetingAttendies item in e.NewItems)
                {
                    item.Users = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MeetingAttendies", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeetingAttendies item in e.OldItems)
                {
                    if (ReferenceEquals(item.Users, this))
                    {
                        item.Users = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MeetingAttendies", item);
                    }
                }
            }
        }
    
        private void FixupMeetingCategory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MeetingCategory item in e.NewItems)
                {
                    item.Users = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MeetingCategory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeetingCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Users, this))
                    {
                        item.Users = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MeetingCategory", item);
                    }
                }
            }
        }
    
        private void FixupUserID_ManagerID(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ManagerTeamMemberRelations item in e.NewItems)
                {
                    item.ManagerID_UserID = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserID_ManagerID", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ManagerTeamMemberRelations item in e.OldItems)
                {
                    if (ReferenceEquals(item.ManagerID_UserID, this))
                    {
                        item.ManagerID_UserID = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserID_ManagerID", item);
                    }
                }
            }
        }
    
        private void FixupUserID_TeamMemberID(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ManagerTeamMemberRelations item in e.NewItems)
                {
                    item.TeamMemberID_UserID = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserID_TeamMemberID", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ManagerTeamMemberRelations item in e.OldItems)
                {
                    if (ReferenceEquals(item.TeamMemberID_UserID, this))
                    {
                        item.TeamMemberID_UserID = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserID_TeamMemberID", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tasks item in e.NewItems)
                {
                    item.Users = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tasks item in e.OldItems)
                {
                    if (ReferenceEquals(item.Users, this))
                    {
                        item.Users = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }

        #endregion
    }
}
