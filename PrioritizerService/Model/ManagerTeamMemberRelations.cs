//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace PrioritizerService.Model
{
    [DataContract(IsReference = true)]
    [Serializable]
    [KnownType(typeof(Users))]
    [KnownType(typeof(Tenant))]
    public partial class ManagerTeamMemberRelations: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private System.Guid _iD;
    
        [DataMember]
        public System.Guid ManagerID
        {
            get { return _managerID; }
            set
            {
                if (_managerID != value)
                {
                    ChangeTracker.RecordOriginalValue("ManagerID", _managerID);
      if (!IsDeserializing)
      {
                          if (ManagerID_UserID != null && ManagerID_UserID.ID != value)
                        {
                            ManagerID_UserID = null;
                        }
                    }
                    _managerID = value;
                    OnPropertyChanged("ManagerID");
                }
            }
        }
        private System.Guid _managerID;
    
        [DataMember]
        public System.Guid TeamMemberID
        {
            get { return _teamMemberID; }
            set
            {
                if (_teamMemberID != value)
                {
                    ChangeTracker.RecordOriginalValue("TeamMemberID", _teamMemberID);
      if (!IsDeserializing)
      {
                          if (TeamMemberID_UserID != null && TeamMemberID_UserID.ID != value)
                        {
                            TeamMemberID_UserID = null;
                        }
                    }
                    _teamMemberID = value;
                    OnPropertyChanged("TeamMemberID");
                }
            }
        }
        private System.Guid _teamMemberID;
    
        [DataMember]
        public System.Guid TenantID
        {
            get { return _tenantID; }
            set
            {
                if (_tenantID != value)
                {
                    ChangeTracker.RecordOriginalValue("TenantID", _tenantID);
      if (!IsDeserializing)
      {
                          if (Tenant != null && Tenant.ID != value)
                        {
                            Tenant = null;
                        }
                    }
                    _tenantID = value;
                    OnPropertyChanged("TenantID");
                }
            }
        }
        private System.Guid _tenantID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Users ManagerID_UserID
        {
            get { return _managerID_UserID; }
            set
            {
                if (!ReferenceEquals(_managerID_UserID, value))
                {
                    var previousValue = _managerID_UserID;
                    _managerID_UserID = value;
                    FixupManagerID_UserID(previousValue);
                    OnNavigationPropertyChanged("ManagerID_UserID");
                }
            }
        }
        private Users _managerID_UserID;
    
        [DataMember]
        public Users TeamMemberID_UserID
        {
            get { return _teamMemberID_UserID; }
            set
            {
                if (!ReferenceEquals(_teamMemberID_UserID, value))
                {
                    var previousValue = _teamMemberID_UserID;
                    _teamMemberID_UserID = value;
                    FixupTeamMemberID_UserID(previousValue);
                    OnNavigationPropertyChanged("TeamMemberID_UserID");
                }
            }
        }
        private Users _teamMemberID_UserID;
    
        [DataMember]
        public Tenant Tenant
        {
            get { return _tenant; }
            set
            {
                if (!ReferenceEquals(_tenant, value))
                {
                    var previousValue = _tenant;
                    _tenant = value;
                    FixupTenant(previousValue);
                    OnNavigationPropertyChanged("Tenant");
                }
            }
        }
        private Tenant _tenant;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ManagerID_UserID = null;
            TeamMemberID_UserID = null;
            Tenant = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupManagerID_UserID(Users previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.UserID_ManagerID.Contains(this))
            {
                previousValue.UserID_ManagerID.Remove(this);
            }
    
            if (ManagerID_UserID != null)
            {
                if (!ManagerID_UserID.UserID_ManagerID.Contains(this))
                {
                    ManagerID_UserID.UserID_ManagerID.Add(this);
                }
    
                ManagerID = ManagerID_UserID.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ManagerID_UserID")
                    && (ChangeTracker.OriginalValues["ManagerID_UserID"] == ManagerID_UserID))
                {
                    ChangeTracker.OriginalValues.Remove("ManagerID_UserID");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ManagerID_UserID", previousValue);
                }
                if (ManagerID_UserID != null && !ManagerID_UserID.ChangeTracker.ChangeTrackingEnabled)
                {
                    ManagerID_UserID.StartTracking();
                }
            }
        }
    
        private void FixupTeamMemberID_UserID(Users previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.UserID_TeamMemberID.Contains(this))
            {
                previousValue.UserID_TeamMemberID.Remove(this);
            }
    
            if (TeamMemberID_UserID != null)
            {
                if (!TeamMemberID_UserID.UserID_TeamMemberID.Contains(this))
                {
                    TeamMemberID_UserID.UserID_TeamMemberID.Add(this);
                }
    
                TeamMemberID = TeamMemberID_UserID.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TeamMemberID_UserID")
                    && (ChangeTracker.OriginalValues["TeamMemberID_UserID"] == TeamMemberID_UserID))
                {
                    ChangeTracker.OriginalValues.Remove("TeamMemberID_UserID");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TeamMemberID_UserID", previousValue);
                }
                if (TeamMemberID_UserID != null && !TeamMemberID_UserID.ChangeTracker.ChangeTrackingEnabled)
                {
                    TeamMemberID_UserID.StartTracking();
                }
            }
        }
    
        private void FixupTenant(Tenant previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ManagerTeamMemberRelations.Contains(this))
            {
                previousValue.ManagerTeamMemberRelations.Remove(this);
            }
    
            if (Tenant != null)
            {
                if (!Tenant.ManagerTeamMemberRelations.Contains(this))
                {
                    Tenant.ManagerTeamMemberRelations.Add(this);
                }
    
                TenantID = Tenant.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tenant")
                    && (ChangeTracker.OriginalValues["Tenant"] == Tenant))
                {
                    ChangeTracker.OriginalValues.Remove("Tenant");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tenant", previousValue);
                }
                if (Tenant != null && !Tenant.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tenant.StartTracking();
                }
            }
        }

        #endregion
    }
}
