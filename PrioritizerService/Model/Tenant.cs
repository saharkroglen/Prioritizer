//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace PrioritizerService.Model
{
    [DataContract(IsReference = true)]
    [Serializable]
    [KnownType(typeof(Users))]
    [KnownType(typeof(Tasks))]
    [KnownType(typeof(Notifications))]
    [KnownType(typeof(Alerts))]
    [KnownType(typeof(attachments))]
    [KnownType(typeof(ManagerTeamMemberRelations))]
    [KnownType(typeof(MeetingAttendies))]
    [KnownType(typeof(MeetingCategory))]
    [KnownType(typeof(MeetingCategoryMap))]
    [KnownType(typeof(Meetings))]
    [KnownType(typeof(MeetingTasks))]
    [KnownType(typeof(projects))]
    public partial class Tenant: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private System.Guid _iD;
    
        [DataMember]
        public string TenantName
        {
            get { return _tenantName; }
            set
            {
                if (_tenantName != value)
                {
                    ChangeTracker.RecordPropertyChange("TenantName");
                    _tenantName = value;
                    OnPropertyChanged("TenantName");
                }
            }
        }
        private string _tenantName;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Users> Users
        {
            get
            {
                if (_users == null)
                {
                    _users = new TrackableCollection<Users>();
                    _users.CollectionChanged += FixupUsers;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_users != null)
                    {
                        _users.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    if (_users != null)
                    {
                        _users.CollectionChanged += FixupUsers;
                    }
                    OnNavigationPropertyChanged("Users");
                }
            }
        }
        private TrackableCollection<Users> _users;
    
        [DataMember]
        public TrackableCollection<Tasks> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Tasks>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Tasks> _tasks;
    
        [DataMember]
        public TrackableCollection<Notifications> Notifications
        {
            get
            {
                if (_notifications == null)
                {
                    _notifications = new TrackableCollection<Notifications>();
                    _notifications.CollectionChanged += FixupNotifications;
                }
                return _notifications;
            }
            set
            {
                if (!ReferenceEquals(_notifications, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notifications != null)
                    {
                        _notifications.CollectionChanged -= FixupNotifications;
                    }
                    _notifications = value;
                    if (_notifications != null)
                    {
                        _notifications.CollectionChanged += FixupNotifications;
                    }
                    OnNavigationPropertyChanged("Notifications");
                }
            }
        }
        private TrackableCollection<Notifications> _notifications;
    
        [DataMember]
        public TrackableCollection<Alerts> Alerts
        {
            get
            {
                if (_alerts == null)
                {
                    _alerts = new TrackableCollection<Alerts>();
                    _alerts.CollectionChanged += FixupAlerts;
                }
                return _alerts;
            }
            set
            {
                if (!ReferenceEquals(_alerts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_alerts != null)
                    {
                        _alerts.CollectionChanged -= FixupAlerts;
                    }
                    _alerts = value;
                    if (_alerts != null)
                    {
                        _alerts.CollectionChanged += FixupAlerts;
                    }
                    OnNavigationPropertyChanged("Alerts");
                }
            }
        }
        private TrackableCollection<Alerts> _alerts;
    
        [DataMember]
        public TrackableCollection<attachments> attachments
        {
            get
            {
                if (_attachments == null)
                {
                    _attachments = new TrackableCollection<attachments>();
                    _attachments.CollectionChanged += Fixupattachments;
                }
                return _attachments;
            }
            set
            {
                if (!ReferenceEquals(_attachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachments != null)
                    {
                        _attachments.CollectionChanged -= Fixupattachments;
                    }
                    _attachments = value;
                    if (_attachments != null)
                    {
                        _attachments.CollectionChanged += Fixupattachments;
                    }
                    OnNavigationPropertyChanged("attachments");
                }
            }
        }
        private TrackableCollection<attachments> _attachments;
    
        [DataMember]
        public TrackableCollection<ManagerTeamMemberRelations> ManagerTeamMemberRelations
        {
            get
            {
                if (_managerTeamMemberRelations == null)
                {
                    _managerTeamMemberRelations = new TrackableCollection<ManagerTeamMemberRelations>();
                    _managerTeamMemberRelations.CollectionChanged += FixupManagerTeamMemberRelations;
                }
                return _managerTeamMemberRelations;
            }
            set
            {
                if (!ReferenceEquals(_managerTeamMemberRelations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_managerTeamMemberRelations != null)
                    {
                        _managerTeamMemberRelations.CollectionChanged -= FixupManagerTeamMemberRelations;
                    }
                    _managerTeamMemberRelations = value;
                    if (_managerTeamMemberRelations != null)
                    {
                        _managerTeamMemberRelations.CollectionChanged += FixupManagerTeamMemberRelations;
                    }
                    OnNavigationPropertyChanged("ManagerTeamMemberRelations");
                }
            }
        }
        private TrackableCollection<ManagerTeamMemberRelations> _managerTeamMemberRelations;
    
        [DataMember]
        public TrackableCollection<MeetingAttendies> MeetingAttendies
        {
            get
            {
                if (_meetingAttendies == null)
                {
                    _meetingAttendies = new TrackableCollection<MeetingAttendies>();
                    _meetingAttendies.CollectionChanged += FixupMeetingAttendies;
                }
                return _meetingAttendies;
            }
            set
            {
                if (!ReferenceEquals(_meetingAttendies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetingAttendies != null)
                    {
                        _meetingAttendies.CollectionChanged -= FixupMeetingAttendies;
                    }
                    _meetingAttendies = value;
                    if (_meetingAttendies != null)
                    {
                        _meetingAttendies.CollectionChanged += FixupMeetingAttendies;
                    }
                    OnNavigationPropertyChanged("MeetingAttendies");
                }
            }
        }
        private TrackableCollection<MeetingAttendies> _meetingAttendies;
    
        [DataMember]
        public TrackableCollection<MeetingCategory> MeetingCategory
        {
            get
            {
                if (_meetingCategory == null)
                {
                    _meetingCategory = new TrackableCollection<MeetingCategory>();
                    _meetingCategory.CollectionChanged += FixupMeetingCategory;
                }
                return _meetingCategory;
            }
            set
            {
                if (!ReferenceEquals(_meetingCategory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetingCategory != null)
                    {
                        _meetingCategory.CollectionChanged -= FixupMeetingCategory;
                    }
                    _meetingCategory = value;
                    if (_meetingCategory != null)
                    {
                        _meetingCategory.CollectionChanged += FixupMeetingCategory;
                    }
                    OnNavigationPropertyChanged("MeetingCategory");
                }
            }
        }
        private TrackableCollection<MeetingCategory> _meetingCategory;
    
        [DataMember]
        public TrackableCollection<MeetingCategoryMap> MeetingCategoryMap
        {
            get
            {
                if (_meetingCategoryMap == null)
                {
                    _meetingCategoryMap = new TrackableCollection<MeetingCategoryMap>();
                    _meetingCategoryMap.CollectionChanged += FixupMeetingCategoryMap;
                }
                return _meetingCategoryMap;
            }
            set
            {
                if (!ReferenceEquals(_meetingCategoryMap, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetingCategoryMap != null)
                    {
                        _meetingCategoryMap.CollectionChanged -= FixupMeetingCategoryMap;
                    }
                    _meetingCategoryMap = value;
                    if (_meetingCategoryMap != null)
                    {
                        _meetingCategoryMap.CollectionChanged += FixupMeetingCategoryMap;
                    }
                    OnNavigationPropertyChanged("MeetingCategoryMap");
                }
            }
        }
        private TrackableCollection<MeetingCategoryMap> _meetingCategoryMap;
    
        [DataMember]
        public TrackableCollection<Meetings> Meetings
        {
            get
            {
                if (_meetings == null)
                {
                    _meetings = new TrackableCollection<Meetings>();
                    _meetings.CollectionChanged += FixupMeetings;
                }
                return _meetings;
            }
            set
            {
                if (!ReferenceEquals(_meetings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetings != null)
                    {
                        _meetings.CollectionChanged -= FixupMeetings;
                    }
                    _meetings = value;
                    if (_meetings != null)
                    {
                        _meetings.CollectionChanged += FixupMeetings;
                    }
                    OnNavigationPropertyChanged("Meetings");
                }
            }
        }
        private TrackableCollection<Meetings> _meetings;
    
        [DataMember]
        public TrackableCollection<MeetingTasks> MeetingTasks
        {
            get
            {
                if (_meetingTasks == null)
                {
                    _meetingTasks = new TrackableCollection<MeetingTasks>();
                    _meetingTasks.CollectionChanged += FixupMeetingTasks;
                }
                return _meetingTasks;
            }
            set
            {
                if (!ReferenceEquals(_meetingTasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_meetingTasks != null)
                    {
                        _meetingTasks.CollectionChanged -= FixupMeetingTasks;
                    }
                    _meetingTasks = value;
                    if (_meetingTasks != null)
                    {
                        _meetingTasks.CollectionChanged += FixupMeetingTasks;
                    }
                    OnNavigationPropertyChanged("MeetingTasks");
                }
            }
        }
        private TrackableCollection<MeetingTasks> _meetingTasks;
    
        [DataMember]
        public TrackableCollection<projects> projects
        {
            get
            {
                if (_projects == null)
                {
                    _projects = new TrackableCollection<projects>();
                    _projects.CollectionChanged += Fixupprojects;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects != null)
                    {
                        _projects.CollectionChanged -= Fixupprojects;
                    }
                    _projects = value;
                    if (_projects != null)
                    {
                        _projects.CollectionChanged += Fixupprojects;
                    }
                    OnNavigationPropertyChanged("projects");
                }
            }
        }
        private TrackableCollection<projects> _projects;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Users.Clear();
            Tasks.Clear();
            Notifications.Clear();
            Alerts.Clear();
            attachments.Clear();
            ManagerTeamMemberRelations.Clear();
            MeetingAttendies.Clear();
            MeetingCategory.Clear();
            MeetingCategoryMap.Clear();
            Meetings.Clear();
            MeetingTasks.Clear();
            projects.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Users item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Users", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Users item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Users", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tasks item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tasks item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }
    
        private void FixupNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Notifications item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Notifications", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Notifications item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Notifications", item);
                    }
                }
            }
        }
    
        private void FixupAlerts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Alerts item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Alerts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Alerts item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Alerts", item);
                    }
                }
            }
        }
    
        private void Fixupattachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (attachments item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("attachments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (attachments item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("attachments", item);
                    }
                }
            }
        }
    
        private void FixupManagerTeamMemberRelations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ManagerTeamMemberRelations item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ManagerTeamMemberRelations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ManagerTeamMemberRelations item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ManagerTeamMemberRelations", item);
                    }
                }
            }
        }
    
        private void FixupMeetingAttendies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MeetingAttendies item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MeetingAttendies", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeetingAttendies item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MeetingAttendies", item);
                    }
                }
            }
        }
    
        private void FixupMeetingCategory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MeetingCategory item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MeetingCategory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeetingCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MeetingCategory", item);
                    }
                }
            }
        }
    
        private void FixupMeetingCategoryMap(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MeetingCategoryMap item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MeetingCategoryMap", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeetingCategoryMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MeetingCategoryMap", item);
                    }
                }
            }
        }
    
        private void FixupMeetings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Meetings item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Meetings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Meetings item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Meetings", item);
                    }
                }
            }
        }
    
        private void FixupMeetingTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MeetingTasks item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MeetingTasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MeetingTasks item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MeetingTasks", item);
                    }
                }
            }
        }
    
        private void Fixupprojects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (projects item in e.NewItems)
                {
                    item.Tenant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("projects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (projects item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tenant, this))
                    {
                        item.Tenant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("projects", item);
                    }
                }
            }
        }

        #endregion
    }
}
